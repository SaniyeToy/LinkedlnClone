//
//  PublishViewController.swift
//  LinkedinClone
//
//  Created by MacOS on 17.02.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol PublishDisplayLogic: AnyObject{
    func displayPublishView(viewModel: Publish.Publish.ViewModel)
}

class PublishViewController: UIViewController{
    var interactor: PublishBusinessLogic?
    var router: (PublishRoutingLogic & PublishDataPassing)?
    var collection : String?
    var image = UIImage(named:"image"){
        didSet{
            image = publishImageView.image
        }
    }
    
    @IBOutlet weak var publishImageView: UIImageView!
    @IBOutlet weak var addCommentTextField: UITextField!
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: - Setup Clean Code Design Pattern
    
    private func setup() {
        let viewController = self
        let interactor = PublishInteractor(worker: PublishWorker())
        let presenter = PublishPresenter()
        let router = PublishRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: - View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
    }
    
    @IBAction func publishButton(_ sender: Any) {
        publishPost()
    }
    
    @IBAction func postSegmentController(_ sender: UISegmentedControl) {
        switch sender.selectedSegmentIndex {
        case 0: collection = "post"
        case 1:  collection = "job post"
        default:
            break
        }
    }
    
    func publishPost(){
        guard let postTitle = addCommentTextField.text,
              !postTitle.isEmpty else {
                  interactor?.alert(title: "Please enter a first name", message: "Invalid First Name")
                  return
              }
        
        interactor?.publishPost(image: image! , postTitle: postTitle, collection: self.collection ?? "post")
        router?.routeToHome()
    }
}
extension PublishViewController: PublishDisplayLogic{
    func displayPublishView(viewModel: Publish.Publish.ViewModel) {
        publishImageView.addTapGesture { [self] in
            chooseImage()
        }
    }
}

extension PublishViewController:  UIImagePickerControllerDelegate , UINavigationControllerDelegate {
    
    func chooseImage(){
        let pickerController = UIImagePickerController()
        pickerController.delegate = self
        pickerController.sourceType = .photoLibrary
        present(pickerController, animated: true , completion: nil)
    }
    func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey : Any]) {
        publishImageView.image = info[.originalImage] as? UIImage
        self.dismiss(animated: true, completion: nil)
    }
}
